<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <script src="https://cdn.tailwindcss.com"></script>
      <link rel="icon" href="/elektor-logo.png" />
    <title>Elektor - Results</title>
  </head>
  <body
    class="min-h-screen bg-gradient-to-br from-blue-50 via-gray-50 to-purple-50 py-8 px-4"
  >
    <div class="max-w-7xl mx-auto">
      <div class="text-center mb-8">
        <h1
          class="text-4xl font-bold text-gray-800 flex items-center justify-center gap-3"
        >
          Realtime Voting Results
        </h1>
      </div>

      <div id="results" class="space-y-8">
        <!-- Voting Statistics -->
        <div
          class="stats bg-white rounded-xl shadow-lg p-6 border border-gray-100 w-full"
        >
          <h2
            class="text-2xl font-semibold text-gray-800 mb-4 flex items-center gap-2"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              class="h-6 w-6 text-blue-500"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"
              />
            </svg>
            Voting Statistics
          </h2>
          <div class="grid md:grid-cols-3 gap-4">
            <div class="p-4 bg-blue-50 rounded-lg">
              <p class="text-sm text-gray-600">Total Registered Voters</p>
              <p class="text-2xl font-semibold text-gray-800">
                <%= votingStats.total_number_of_voters || 0 %>
              </p>
            </div>
            <div class="p-4 bg-green-50 rounded-lg">
              <p class="text-sm text-gray-600">Voter Participation</p>
              <p class="text-2xl font-semibold text-gray-800">
                <%= votingStats.voter_turnout || 0 %>
              </p>
            </div>
            <div class="p-4 bg-red-50 rounded-lg">
              <p class="text-sm text-gray-600">Non-Participants</p>
              <p class="text-2xl font-semibold text-gray-800">
                <%= votingStats.voter_turnoff || 0 %>
              </p>
            </div>
            <div class="p-4 bg-yellow-50 rounded-lg">
              <p class="text-sm text-gray-600">Skipped Ballots</p>
              <p class="text-2xl font-semibold text-gray-800">
                <%= votingStats.skipped_votes || 0 %>
              </p>
            </div>
            <div class="p-4 bg-purple-50 rounded-lg">
              <p class="text-sm text-gray-600">Total Ballots Submitted</p>
              <p class="text-2xl font-semibold text-gray-800">
                <%= votingStats.total_votes_cast || 0 %>
              </p>
            </div>
          </div>
        </div>

        <!-- Group the results by position -->
        <% 
        const groupedResults = results.reduce((acc, result) => { 
          if (!acc[result.position]) { 
            acc[result.position] = []; 
          }
          acc[result.position].push(result); 
          return acc; 
        }, {}); 
        %>

        <!-- Results Tables -->
        <div class="space-y-4">
          <% Object.keys(groupedResults).forEach(position => { %>
          <div
            class="result-section bg-white rounded-xl shadow-lg p-6 border border-gray-100"
          >
            <h2 class="text-2xl font-semibold text-gray-800 mb-4">
              <%= position %>
            </h2>

            <% 
            let totalVotesForPosition = groupedResults[position].reduce((acc, result) => 
              acc + (result.number_of_votes || 0), 0
            ); 
            %>

            <div class="overflow-x-auto">
              <table class="w-full">
                <thead>
                  <tr class="bg-gray-50">
                    <th
                      class="px-6 py-3 text-left text-sm font-semibold text-gray-700"
                    >
                      Candidate Name
                    </th>
                    <th
                      class="px-6 py-3 text-left text-sm font-semibold text-gray-700"
                    >
                      Number of Votes
                    </th>
                    <th
                      class="px-6 py-3 text-left text-sm font-semibold text-gray-700"
                    >
                      Percentage
                    </th>
                  </tr>
                </thead>
                <tbody class="divide-y divide-gray-200">
                  <% groupedResults[position].forEach(result => { %>
                  <tr class="hover:bg-gray-50 transition-colors">
                    <td class="px-6 py-4 text-sm text-gray-800">
                      <%= result.candidate_name %>
                    </td>
                    <td class="px-6 py-4 text-sm text-gray-800">
                      <%= result.number_of_votes || 0 %>
                    </td>
                    <td class="px-6 py-4 text-sm text-gray-800">
                      <% 
                      const percentage = totalVotesForPosition === 0 ? 0 :
                        ((result.number_of_votes / totalVotesForPosition) * 100).toFixed(2); 
                      %>
                      <div class="flex items-center gap-2">
                        <div class="w-24 bg-gray-200 rounded-full h-2">
                          <div
                            class="bg-blue-500 rounded-full h-2"
                            style="width: <%= percentage %>%"
                          ></div>
                        </div>
                        <%= percentage %>%
                      </div>
                    </td>
                  </tr>
                  <% }); %>
                </tbody>
              </table>
            </div>
          </div>
          <% }); %>
        </div>
      </div>

           <a
  href="/"
  class="block w-full bg-white hover:bg-gray-50 text-gray-700 font-semibold my-4 py-3.5 px-6 rounded-xl text-center transition-all duration-200 border-2 border-gray-200 hover:border-gray-300 flex items-center justify-center gap-2 group shadow-sm hover:shadow-md"
>
  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 group-hover:-translate-x-1 transition-transform" fill="none" viewBox="0 0 24 24" stroke="currentColor">
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
  </svg>
  <span>Back to Dashboard</span>
</a>
    </div>

    <script src="/socket.io/socket.io.js"></script>
    <script>
      const socket = io();

      function updateVotingStats(stats) {
        return `
          <div class="stats bg-white rounded-xl shadow-lg p-6 border border-gray-100">
            <h2 class="text-2xl font-semibold text-gray-800 mb-4 flex items-center gap-2">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-blue-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
              </svg>
              Voting Statistics
            </h2>
            <div class="grid md:grid-cols-3 gap-4">
              <div class="p-4 bg-blue-50 rounded-lg">
                <p class="text-sm text-gray-600">Total Registered Voters</p>
                <p class="text-2xl font-semibold text-gray-800">${stats.total_number_of_voters || 0}</p>
              </div>
              <div class="p-4 bg-green-50 rounded-lg">
                <p class="text-sm text-gray-600">Voter Participation</p>
                <p class="text-2xl font-semibold text-gray-800">${stats.voter_turnout || 0}</p>
              </div>
              <div class="p-4 bg-red-50 rounded-lg">
                <p class="text-sm text-gray-600">Non-Participants</p>
                <p class="text-2xl font-semibold text-gray-800">${stats.voter_turnoff || 0}</p>
              </div>
              <div class="p-4 bg-yellow-50 rounded-lg">
                <p class="text-sm text-gray-600">Skipped Ballots</p>
                <p class="text-2xl font-semibold text-gray-800">${stats.skipped_votes || 0}</p>
              </div>
              <div class="p-4 bg-purple-50 rounded-lg">
                <p class="text-sm text-gray-600">Total Ballots Submitted</p>
                <p class="text-2xl font-semibold text-gray-800">${stats.total_votes_cast || 0}</p>
              </div>
            </div>
          </div>
        `;
      }

      function updateResultsTables(results) {
        const groupedResults = results.reduce((acc, result) => {
          if (!acc[result.position]) {
            acc[result.position] = [];
          }
          acc[result.position].push(result);
          return acc;
        }, {});

        const desiredOrder = [
          'PRESIDENT',
          'AMBASSADOR',
          'GENERAL SECRETARY',
          'WOCOM',
          'FINANCIAL OFFICER',
          'PRO',
          'ENTERTAINMENT SECRETARY',
          'SPORTS SECRETARY',
        ];

        const orderedPositions = Object.keys(groupedResults).sort((a, b) => {
          const indexA = desiredOrder.indexOf(a);
          const indexB = desiredOrder.indexOf(b);
          if (indexA === -1) return 1;
          if (indexB === -1) return -1;
          return indexA - indexB;
        });

        return orderedPositions
          .map((position) => {
            const totalVotesForPosition = groupedResults[position].reduce(
              (acc, result) => acc + (result.number_of_votes || 0),
              0
            );

            return `
              <div class="result-section bg-white rounded-xl shadow-lg p-6 border border-gray-100">
                <h2 class="text-2xl font-semibold text-gray-800 mb-4">${position}</h2>
                <div class="overflow-x-auto">
                  <table class="w-full">
                    <thead>
                      <tr class="bg-gray-50">
                        <th class="px-6 py-3 text-left text-sm font-semibold text-gray-700">Candidate Name</th>
                        <th class="px-6 py-3 text-left text-sm font-semibold text-gray-700">Number of Votes</th>
                        <th class="px-6 py-3 text-left text-sm font-semibold text-gray-700">Percentage</th>
                      </tr>
                    </thead>
                    <tbody class="divide-y divide-gray-200">
                      ${groupedResults[position]
                        .map((result) => {
                          const percentage =
                            totalVotesForPosition === 0
                              ? 0
                              : (
                                  ((result.number_of_votes || 0) /
                                    totalVotesForPosition) *
                                  100
                                ).toFixed(2);
                          return `
                            <tr class="hover:bg-gray-50 transition-colors">
                              <td class="px-6 py-4 text-sm text-gray-800">${result.candidate_name}</td>
                              <td class="px-6 py-4 text-sm text-gray-800">${result.number_of_votes || 0}</td>
                              <td class="px-6 py-4 text-sm text-gray-800">
                                <div class="flex items-center gap-2">
                                  <div class="w-24 bg-gray-200 rounded-full h-2">
                                    <div class="bg-blue-500 rounded-full h-2" style="width: ${percentage}%"></div>
                                  </div>
                                  ${percentage}%
                                </div>
                              </td>
                            </tr>
                          `;
                        })
                        .join('')}
                    </tbody>
                  </table>
                </div>
              </div>
            `;
          })
          .join('');
      }

      socket.on('updateResults', (data) => {
        const resultsContainer = document.getElementById('results');
        
        if (!data || !data.results || data.results.length === 0) {
          resultsContainer.innerHTML =
            '<p class="text-center text-gray-500 text-lg">No results available.</p>';
          return;
        }

        resultsContainer.innerHTML = '';
        
        // Update voting stats
        if (data.votingStats) {
          resultsContainer.innerHTML = updateVotingStats(data.votingStats);
        }
        
        // Update results tables
        const tableContainer = document.createElement('div');
        tableContainer.classList.add('space-y-4');
        tableContainer.innerHTML = updateResultsTables(data.results);
        resultsContainer.appendChild(tableContainer);
      });
    </script>
  </body>
</html>